" Setup Vundler
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" For fast openining of files.
Plugin 'kien/ctrlp.vim'

" The best color scheme ever
Plugin 'nanotech/jellybeans.vim'
" Plugin 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}

" Replace newrw
Plugin 'tpope/vim-vinegar'

" Opening test files like a baws.
Plugin 'compactcode/alternate.vim'
Plugin 'compactcode/open.vim'

" Coffeescript highlighting
Plugin 'kchmck/vim-coffee-script'

" React syntax highlighting
Plugin 'mtscout6/vim-cjsx'

" The best golang plugin I found
Plugin 'fatih/vim-go'

" Tab completion
Plugin 'ervandew/supertab'

" Best searching ever
Plugin 'rking/ag.vim'

" JSX & Javascript
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'

" Latest Ruby colors
Plugin 'vim-ruby/vim-ruby'

" Supports opening files with colon line numbers at the end like this:
" vim /Users/keithpitt/.gem/ruby/2.4.2/gems/letter_opener-1.5.0/lib/letter_opener/message.rb:12
Plugin 'bogado/file-line'

" Ragel colors omg.
Plugin 'jneen/ragel.vim'

" GraphQL is the best
Plugin 'jparise/vim-graphql'

" Mmmm...templates...
Plugin 'mustache/vim-mustache-handlebars'

" No one knows what it is...
" Plugin 'file:///Users/keithpitt/Development/framework/vim-frontendlang'
set runtimepath^=~/.vim/bundle/vim-frontendlang

" All of your Plugins must be added before the following line
call vundle#end()
filetype plugin indent on


" Setup the color scheme
syntax enable
colorscheme jellybeans

" Make sure we set the filetype when we open a Ragel file. This isn't built
" into `ragel.vim`... (boo....)
" https://github.com/jneen/ragel.vim/pull/4/files
augroup vim-ragel-filetype
  autocmd!
  au BufRead,BufNewFile *.rl,*.ragel set filetype=ragel
augroup END

" Force jsx syntax highlighting in .js files
let g:jsx_ext_required = 0

" Enable goimports to automatically insert import paths
let g:go_fmt_command = "goimports"

" Disable backups, we have git!
set nobackup
set nowritebackup
set noswapfile

" Show line numbers
set number

" Some awesome shortcuts for CTRLP
nnoremap ,t :CtrlP<CR>
nnoremap ,f :CtrlPMRUFiles<CR>

" Start CTRLP reversed (the other way doesn't make sense to me)
let g:ctrlp_match_window_reversed = 0

" Cache the list between sessions
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_use_caching = 1

" Ignore a heap off stuff in CtrlP
set wildignore+=*/tmp/*,*.so,*.swp,*.zip

let g:ctrlp_custom_ignore = {
  \ 'dir':  'coverage\|tmp\|log\|solr\|node_modules\|\.git\|\.hg\|\.svn',
  \ 'file': '\.exe$\|\.so$\|\.dll$|\.gif$\|\.png$\|\.jpg$|\.ico$|\.ttf$|\.EOT$|\.ico$\|\.DS_Store$',
  \ }

" Remove white space on save
autocmd BufWritePre * :%s/\s\+$//e

" The backspace key doesn't work in insert mode with outh, crazy town.
set backspace=indent,eol,start

" Map the semi-colon (;) to (:) to save having to press shift all the time.
map ; :

" Automatically indent code
set autoindent

" Shortcut to just to the file list
map ,r -

" Shortcut to take us back to the previous buffer.
map `` <C-^>

" Dont' wrap source code in the editor...let it flow on!
set nowrap

" Faster regular expression lib
set regexpengine=1

" Shortcuts to opening test files
map ,s :OpenVertical(alternate#FindAlternate())<CR>
map ,a :Open(alternate#FindAlternate())<CR>

" http://vim.wikia.com/wiki/Easy_edit_of_files_in_the_same_directory
" Easy edit files in same directory
" e %%/new_file.txt
cabbr <expr> %% expand('%:p:h')

" Show spelling errors when editing git commits.
if has('autocmd')
  if has('spell')
    au BufNewFile,BufRead COMMIT_EDITMSG setlocal spell
  endif
endif

" 2 space indentntation
autocmd FileType ruby,eruby set shiftwidth=2 softtabstop=2 expandtab
autocmd FileType bash,shell,sh set shiftwidth=2 softtabstop=2 expandtab
autocmd FileType coffee,javascript,js,jsx set shiftwidth=2 softtabstop=2 expandtab
autocmd FileType sass,scss,css set shiftwidth=2 softtabstop=2 expandtab
autocmd FileType html set shiftwidth=2 softtabstop=2 expandtab

" Run ruby tests with rr
autocmd FileType ruby nnoremap <buffer> rr :execute "! time ./bin/rspec " . alternate#FindTest() <CR>
autocmd FileType ruby nnoremap <buffer> ff :execute "! time ./bin/rspec -n " . alternate#FindTest() <CR>
autocmd FileType ruby nnoremap <buffer> tt :execute "! time ./bin/rspec -n " . alternate#FindTest() . ":" . line(".") <CR>
autocmd FileType coffee nnoremap <buffer> rr :execute "! bundle exec teabag " . alternate#FindTest() <CR>
autocmd FileType javascript nnoremap <buffer> rr :execute "! bundle exec teabag " . alternate#FindTest() <CR>
autocmd FileType go nnoremap <buffer> rr :execute "! gotest " . alternate#FindTest() <CR>

" Make :W to :w
cnoreabbrev W w

" Tweaks to the default search settings
set hlsearch
set incsearch
set ignorecase
set smartcase

" Trying to leave an unsaved buffer will fail without this
set hidden

set shell=$SHELL

map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
      \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

set list
set listchars=tab:>-
